<?php
function import_nodes_init()
{
	//drupal_set_message("function import_nodes_init !!!");
}
function import_nodes_form_alter(&$form, $form_state, $form_id)
{
	//drupal_set_message("function import_nodes_form_alter !!!");
}
/**
 * Implements hook_menu().
 */
function import_nodes_menu() {
  $items['import_nodes/upload'] = array(
    'title' => 'Import nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_import_nodes_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
//------------------------------------------
  $items['import_nodes/import'] = array(
    'title' => 'Import nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_import_nodes_form_import'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
//------------------------------------------
  return $items;
}

/**
 * Implements hook_stream_wrappers().
 */
function import_nodes_stream_wrappers() {
  return array(
    'dummy' => array(
      'name' => t('Dummy files'),
      'class' => 'DrupalDummyStreamWrapper',
      'description' => t('Dummy wrapper for simpletest.'),
    ),
    'dummy-remote' => array(
      'name' => t('Dummy files (remote)'),
      'class' => 'DrupalDummyRemoteStreamWrapper',
      'description' => t('Dummy wrapper for simpletest (remote).'),
    ),
  );
}

/**
 * Form to test file uploads.
 */
function _import_nodes_form($form, &$form_state) 
{
//-----------------------------------------
	$form['header'] = array('#markup' => '<h2>list files for import</h2>');
	$dir = "public://imports";
	$files = file_scan_directory($dir, '/.*\.*$/');
//echo "<pre>";
//print_r($files);
//echo "</pre>";
	$output="";
	foreach ($files as $file)
	{

		$url_view="";
		$url_import="";
		$url_del="";
		$url_view.="<a href='".base_path().variable_get('file_public_path')."/imports/"
.$file->filename."' target=_blank> view </a>";

		$url_import.="<a href='".base_path()."import_nodes/import?file="
.variable_get('file_public_path')."/imports/".$file->filename."'> import </a>";

		$url_del.="<a href='".base_path()."import_nodes/del?file="
.variable_get('file_public_path')."/imports/".$file->filename."'> delete </a>";

		$output .= "<li>".$file->filename.$url_view.$url_import.$url_del."</li>";
	}
	$output = "<ul>".$output."</ul>";
	$form['wrapper'] = array('#markup' => $output);
//-----------------------------------------

  $form['import_nodes_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload a file'),
  );
  $form['import_nodes_replace'] = array(
    '#type' => 'select',
    '#title' => t('if already exists file, then.... '),
    '#options' => array(
      FILE_EXISTS_RENAME => t('Appends number until name is unique'),
      FILE_EXISTS_REPLACE => t('Replace the existing file'),
      FILE_EXISTS_ERROR => t('Fail with an error'),
    ),
    '#default_value' => FILE_EXISTS_REPLACE,
  );
  $form['file_subdir'] = array(
    '#type' => 'textfield',
    '#title' => t('Subdirectory for upload file'),
    '#default_value' => 'imports',
  );

  $form['extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed extensions.'),
    '#default_value' => 'xml',
  );

  $form['allow_all_extensions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow all extensions?'),
    '#default_value' => FALSE,
  );

/*
  $form['is_image_file'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is this an image file?'),
    '#default_value' => TRUE,
  );
*/

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Process the upload.
 */
function _import_nodes_form_submit(&$form, &$form_state) {
  // Process the upload and perform validation. Note: we're using the
  // form value for the $replace parameter.
  if (!empty($form_state['values']['file_subdir'])) {
    //$destination = 'temporary://' . $form_state['values']['file_subdir'];
    $destination = 'public://' . $form_state['values']['file_subdir'];
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
  }
  else {
    $destination = FALSE;
  }

  // Setup validators.
/*
  $validators = array();
  if ($form_state['values']['is_image_file']) {
    $validators['file_validate_is_image'] = array();
  }
*/
  if ($form_state['values']['allow_all_extensions']) {
    $validators['file_validate_extensions'] = array();
  }
  elseif (!empty($form_state['values']['extensions'])) {
    $validators['file_validate_extensions'] = array($form_state['values']['extensions']);
  }

  $file = file_save_upload('import_nodes_upload', $validators, $destination, $form_state['values']['import_nodes_replace']);
  if ($file) {
    $form_state['values']['import_nodes_upload'] = $file;
    drupal_set_message(t('File @filepath was uploaded.', array('@filepath' => $file->uri)));
    drupal_set_message(t('File name is @filename.', array('@filename' => $file->filename)));
    drupal_set_message(t('File MIME type is @mimetype.', array('@mimetype' => $file->filemime)));
    //drupal_set_message(t('You WIN!'));
  }
  elseif ($file === FALSE) {
    drupal_set_message(t('Epic upload FAIL!'), 'error');
  }
}


//===========================================================================
function _import_nodes_form_import($form, &$form_state) 
{
//echo "<pre>";
//print_r($_SERVER);
//echo "</pre>";
	//drupal_set_message(t('function _import_nodes_form_test'));
	//global $base_url;
	//$output=$base_url.'<br>';
	$dir_path=dirname($_SERVER['SCRIPT_FILENAME']);

	$output='Import library_book nodes fields from <b>'.$_REQUEST['file'].'</b>';
	$form['wrapper'] = array('#markup' => $output);

	load_xml($dir_path."/".$_REQUEST['file']);
	return $form;
}//------------------------ end function

function load_xml($xml_file) 
{
	drupal_set_message(t('function load_xml'));

	$xml = simplexml_load_file($xml_file);
	if ($xml == FALSE) 
	  {
		exit("Failed to open ".$xml_file);
	  }
//echo "<pre>";
//print_r ($xml);
//echo "</pre>";
/*
SimpleXMLElement Object
(
    [node] => Array
        (
            [0] => SimpleXMLElement Object
                (
                    [@attributes] => Array
                        (
                            [nid] => 144
                        )

                    [node_title] => Борхес Хорхе Луис
                    [node_body] => SimpleXMLElement Object
                        (
                        )

                    [book_author] => Борхес Хорхе Луис
                    [book_name] => Сборник рассказов
                    [book_format] => xml
                    [book_filename] => Borhes/B_fantasy_kniga.xml
                    [subfolder] => B
                )
*/
}//------------------------ end function

//===========================================================================

/**
 * Reset/initialize the history of calls to the file_* hooks.
 *
 * @see import_nodes_get_calls()
 * @see import_nodes_reset()
 */
function import_nodes_reset() {
  // Keep track of calls to these hooks
  $results = array(
    'load' => array(),
    'validate' => array(),
    'download' => array(),
    'insert' => array(),
    'update' => array(),
    'copy' => array(),
    'move' => array(),
    'delete' => array(),
  );
  variable_set('import_nodes_results', $results);

  // These hooks will return these values, see import_nodes_set_return().
  $return = array(
    'validate' => array(),
    'download' => NULL,
  );
  variable_set('import_nodes_return', $return);
}

/**
 * Get the arguments passed to invocation of a given hook since
 * import_nodes_reset() was last called.
 *
 * @param $op
 *   One of the hook_file_* operations: 'load', 'validate', 'download',
 *   'insert', 'update', 'copy', 'move', 'delete'.
 *
 * @return
 *   Array of the parameters passed to each call.
 *
 * @see _import_nodes_log_call()
 * @see import_nodes_reset()
 */
function import_nodes_get_calls($op) {
  $results = variable_get('import_nodes_results', array());
  return $results[$op];
}

/**
 * Get an array with the calls for all hooks.
 *
 * @return
 *   An array keyed by hook name ('load', 'validate', 'download', 'insert',
 *   'update', 'copy', 'move', 'delete') with values being arrays of parameters
 *   passed to each call.
 */
function import_nodes_get_all_calls() {
  return variable_get('import_nodes_results', array());
}

/**
 * Store the values passed to a hook invocation.
 *
 * @param $op
 *   One of the hook_file_* operations: 'load', 'validate', 'download',
 *   'insert', 'update', 'copy', 'move', 'delete'.
 * @param $args
 *   Values passed to hook.
 *
 * @see import_nodes_get_calls()
 * @see import_nodes_reset()
 */
function _import_nodes_log_call($op, $args) {
  $results = variable_get('import_nodes_results', array());
  $results[$op][] = $args;
  variable_set('import_nodes_results', $results);
}

/**
 * Load the appropriate return value.
 *
 * @param $op
 *   One of the hook_file_[validate,download] operations.
 *
 * @return
 *   Value set by import_nodes_set_return().
 *
 * @see import_nodes_set_return()
 * @see import_nodes_reset()
 */
function _import_nodes_get_return($op) {
  $return = variable_get('import_nodes_return', array($op => NULL));
  return $return[$op];
}

/**
 * Assign a return value for a given operation.
 *
 * @param $op
 *   One of the hook_file_[validate,download] operations.
 * @param $value
 *   Value for the hook to return.
 *
 * @see _import_nodes_get_return()
 * @see import_nodes_reset()
 */
function import_nodes_set_return($op, $value) {
  $return = variable_get('import_nodes_return', array());
  $return[$op] = $value;
  variable_set('import_nodes_return', $return);
}

/**
 * Implements hook_file_load().
 */
function import_nodes_file_load($files) {
  foreach ($files as $file) {
    _import_nodes_log_call('load', array($file));
    // Assign a value on the object so that we can test that the $file is passed
    // by reference.
    $file->import_nodes['loaded'] = TRUE;
  }
}

/**
 * Implements hook_file_validate().
 */
function import_nodes_file_validate($file) {
  _import_nodes_log_call('validate', array($file));
  return _import_nodes_get_return('validate');
}

/**
 * Implements hook_file_download().
 */
function import_nodes_file_download($uri) {
  _import_nodes_log_call('download', array($uri));
  return _import_nodes_get_return('download');
}

/**
 * Implements hook_file_insert().
 */
function import_nodes_file_insert($file) {
  _import_nodes_log_call('insert', array($file));
}

/**
 * Implements hook_file_update().
 */
function import_nodes_file_update($file) {
  _import_nodes_log_call('update', array($file));
}

/**
 * Implements hook_file_copy().
 */
function import_nodes_file_copy($file, $source) {
  _import_nodes_log_call('copy', array($file, $source));
}

/**
 * Implements hook_file_move().
 */
function import_nodes_file_move($file, $source) {
  _import_nodes_log_call('move', array($file, $source));
}

/**
 * Implements hook_file_delete().
 */
function import_nodes_file_delete($file) {
  _import_nodes_log_call('delete', array($file));
}

/**
 * Implements hook_file_url_alter().
 */
function import_nodes_file_url_alter(&$uri) {
  // Only run this hook when this variable is set. Otherwise, we'd have to add
  // another hidden test module just for this hook.
  $alter_mode = variable_get('import_nodes_hook_file_url_alter', FALSE);
  if (!$alter_mode) {
    return;
  }
  // Test alteration of file URLs to use a CDN.
  elseif ($alter_mode == 'cdn') {
    $cdn_extensions = array('css', 'js', 'gif', 'jpg', 'jpeg', 'png');

    // Most CDNs don't support private file transfers without a lot of hassle,
    // so don't support this in the common case.
    $schemes = array('public');

    $scheme = file_uri_scheme($uri);

    // Only serve shipped files and public created files from the CDN.
    if (!$scheme || in_array($scheme, $schemes)) {
      // Shipped files.
      if (!$scheme) {
        $path = $uri;
      }
      // Public created files.
      else {
        $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
        $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
      }

      // Clean up Windows paths.
      $path = str_replace('\\', '/', $path);

      // Serve files with one of the CDN extensions from CDN 1, all others from
      // CDN 2.
      $pathinfo = pathinfo($path);
      if (array_key_exists('extension', $pathinfo) && in_array($pathinfo['extension'], $cdn_extensions)) {
        $uri = FILE_URL_TEST_CDN_1 . '/' . $path;
      }
      else {
        $uri = FILE_URL_TEST_CDN_2 . '/' . $path;
      }
    }
  }
  // Test alteration of file URLs to use root-relative URLs.
  elseif ($alter_mode == 'root-relative') {
    // Only serve shipped files and public created files with root-relative
    // URLs.
    $scheme = file_uri_scheme($uri);
    if (!$scheme || $scheme == 'public') {
      // Shipped files.
      if (!$scheme) {
        $path = $uri;
      }
      // Public created files.
      else {
        $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
        $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
      }

      // Clean up Windows paths.
      $path = str_replace('\\', '/', $path);

      // Generate a root-relative URL.
      $uri = base_path() . '/' . $path;
    }
  }
  // Test alteration of file URLs to use protocol-relative URLs.
  elseif ($alter_mode == 'protocol-relative') {
    // Only serve shipped files and public created files with protocol-relative
    // URLs.
    $scheme = file_uri_scheme($uri);
    if (!$scheme || $scheme == 'public') {
      // Shipped files.
      if (!$scheme) {
        $path = $uri;
      }
      // Public created files.
      else {
        $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
        $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
      }

      // Clean up Windows paths.
      $path = str_replace('\\', '/', $path);

      // Generate a protocol-relative URL.
      $uri = '/' . base_path() . '/' . $path;
    }
  }
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function import_nodes_file_mimetype_mapping_alter(&$mapping) {
  // Add new mappings.
  $mapping['mimetypes']['import_nodes_mimetype_1'] = 'madeup/import_nodes_1';
  $mapping['mimetypes']['import_nodes_mimetype_2'] = 'madeup/import_nodes_2';
  $mapping['mimetypes']['import_nodes_mimetype_3'] = 'madeup/doc';
  $mapping['extensions']['import_nodes_1'] = 'import_nodes_mimetype_1';
  $mapping['extensions']['import_nodes_2'] = 'import_nodes_mimetype_2';
  $mapping['extensions']['import_nodes_3'] = 'import_nodes_mimetype_2';
  // Override existing mapping.
  $mapping['extensions']['doc'] = 'import_nodes_mimetype_3';
}

/**
 * Helper class for testing the stream wrapper registry.
 *
 * Dummy stream wrapper implementation (dummy://).
 */
class DrupalDummyStreamWrapper extends DrupalLocalStreamWrapper {
  function getDirectoryPath() {
    return variable_get('stream_public_path', 'sites/default/files');
  }

  /**
   * Override getInternalUri().
   *
   * Return a dummy path for testing.
   */
  function getInternalUri() {
    return '/dummy/example.txt';
  }

  /**
   * Override getExternalUrl().
   *
   * Return the HTML URI of a public file.
   */
  function getExternalUrl() {
    return '/dummy/example.txt';
  }
}

/**
 * Helper class for testing the stream wrapper registry.
 *
 * Dummy remote stream wrapper implementation (dummy-remote://).
 *
 * Basically just the public scheme but not returning a local file for realpath.
 */
class DrupalDummyRemoteStreamWrapper extends DrupalPublicStreamWrapper {
  function realpath() {
    return FALSE;
  }
}
